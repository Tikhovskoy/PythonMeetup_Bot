import pytest
from unittest.mock import AsyncMock, MagicMock
from telegram import Update
from bot.handlers import networking
from bot.services import networking_service

@pytest.fixture(autouse=True)
def clear_profiles():
    networking_service._FAKE_PROFILES.clear()

@pytest.mark.asyncio
async def test_networking_three_users_flow():
    user_ids = [5555, 7777, 8888]
    profiles = [
        dict(name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", contacts="@ivan", stack="Python", role="Backend", grade="Junior"),
        dict(name="–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", contacts="@maria", stack="Django", role="Frontend", grade="Middle"),
        dict(name="–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤", contacts="@alex", stack="Flask", role="Fullstack", grade="Senior"),
    ]
    contexts = []
    updates = []

    # --- –í—Å–µ —Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    for user_id, profile in zip(user_ids, profiles):
        context = MagicMock()
        context.user_data = {}
        update = MagicMock(spec=Update)
        update.effective_user.id = user_id
        update.message.reply_text = AsyncMock()
        await networking.networking_handler(update, context)
        update.message.text = profile['name']
        await networking.netw_name_handler(update, context)
        update.message.text = profile['contacts']
        await networking.netw_contacts_handler(update, context)
        update.message.text = profile['stack']
        await networking.netw_stack_handler(update, context)
        update.message.text = profile['role']
        await networking.netw_role_handler(update, context)
        update.message.text = profile['grade']
        await networking.netw_grade_handler(update, context)
        contexts.append(context)
        updates.append(update)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
    for user_id, profile in zip(user_ids, profiles):
        saved = networking_service.get_profile(user_id)
        assert saved is not None
        for key in profile:
            assert saved[key] == profile[key]

    # --- –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—Å—Ç–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö ---
    for idx, (context, update, user_id) in enumerate(zip(contexts, updates, user_ids)):
        # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ (—É–∂–µ –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã) —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç–æ–π
        context.user_data['viewed_profiles'] = []
        show_ids = [uid for uid in user_ids if uid != user_id]
        seen = set()
        # –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ "‚û°Ô∏è –î–∞–ª—å—à–µ" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –¥—Ä—É–≥–∏—Ö (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É —Å–ª–æ–≤–∞—Ä—è)
        for _ in range(2):  # –í—Å–µ–≥–æ 2 —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç—ã
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_profile_id –∫–∞–∫ —É show_next_profile
            next_profiles = networking_service.get_profiles_list(user_id, context.user_data['viewed_profiles'])
            if not next_profiles:
                break
            current_id = next_profiles[0]['telegram_id']
            context.user_data['current_profile_id'] = current_id
            update.message.text = "‚û°Ô∏è –î–∞–ª—å—à–µ"
            await networking.netw_show_handler(update, context)
            seen.add(current_id)
            assert current_id != user_id
        # –ü–æ—Å–ª–µ –¥–≤—É—Ö –Ω–∞–∂–∞—Ç–∏–π "‚û°Ô∏è –î–∞–ª—å—à–µ" –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ—Ç
        assert seen == set(show_ids)
        update.message.text = "‚û°Ô∏è –î–∞–ª—å—à–µ"
        await networking.netw_show_handler(update, context)
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
        update.message.text = "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
        await networking.netw_show_handler(update, context)
        # –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ª–∏—Å—Ç–∞—Ç—å –æ–±–∞ –ø—Ä–æ—Ñ–∏–ª—è
        context.user_data['viewed_profiles'] = []
        for _ in range(2):
            next_profiles = networking_service.get_profiles_list(user_id, context.user_data['viewed_profiles'])
            if not next_profiles:
                break
            current_id = next_profiles[0]['telegram_id']
            context.user_data['current_profile_id'] = current_id
            update.message.text = "‚û°Ô∏è –î–∞–ª—å—à–µ"
            await networking.netw_show_handler(update, context)
        update.message.text = "‚¨ÖÔ∏è –í –º–µ–Ω—é"
        result = await networking.netw_show_handler(update, context)
        assert result == "STATE_MENU"
