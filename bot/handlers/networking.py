from telegram import Update
from telegram.ext import ContextTypes
from bot.constants import (
    STATE_MENU, STATE_NETW_NAME, STATE_NETW_CONTACTS, STATE_NETW_STACK,
    STATE_NETW_ROLE, STATE_NETW_GRADE, STATE_NETW_SHOW,
)
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.networking_keyboards import get_next_profile_keyboard, get_profiles_finished_keyboard
from bot.services import networking_service

async def networking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    profile = networking_service.get_profile(telegram_id)
    if not profile:
        context.user_data['profile'] = {}
        await update.message.reply_text("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û:")
        return STATE_NETW_NAME

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç
    context.user_data['viewed_profiles'] = []
    return await show_next_profile(update, context)

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    viewed = context.user_data.get('viewed_profiles', [])
    profiles = networking_service.get_profiles_list(telegram_id, viewed)

    if not profiles:
        await update.message.reply_text(
            "–ë–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_profiles_finished_keyboard(),
        )
        return STATE_NETW_SHOW

    profile = profiles[0]
    context.user_data['current_profile_id'] = profile['telegram_id']
    await update.message.reply_text(
        f"–§–ò–û: {profile['name']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {profile['contacts']}\n"
        f"–°—Ç–µ–∫: {profile['stack']}\n"
        f"–†–æ–ª—å: {profile['role']}\n"
        f"–ì—Ä–µ–π–¥: {profile['grade']}",
        reply_markup=get_next_profile_keyboard(),
    )
    return STATE_NETW_SHOW

async def netw_show_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    telegram_id = update.effective_user.id
    viewed = context.user_data.get('viewed_profiles', [])

    if text == "‚û°Ô∏è –î–∞–ª—å—à–µ":
        current = context.user_data.get('current_profile_id')
        if current and current not in viewed:
            viewed.append(current)
        context.user_data['viewed_profiles'] = viewed
        return await show_next_profile(update, context)
    if text == "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        context.user_data['viewed_profiles'] = []
        return await show_next_profile(update, context)
    if text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await update.message.reply_text(
            "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(),
        )
        return STATE_MENU

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!",
        reply_markup=get_next_profile_keyboard(),
    )
    return STATE_NETW_SHOW

async def netw_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['profile']['name'] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram, —Ç–µ–ª–µ—Ñ–æ–Ω):")
    return STATE_NETW_CONTACTS

async def netw_contacts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['profile']['contacts'] = update.message.text.strip()
    await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, PostgreSQL):")
    return STATE_NETW_STACK

async def netw_stack_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['profile']['stack'] = update.message.text.strip()
    await update.message.reply_text("–¢–≤–æ—è —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Backend, Frontend, DevOps):")
    return STATE_NETW_ROLE

async def netw_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['profile']['role'] = update.message.text.strip()
    await update.message.reply_text("–¢–≤–æ–π –≥—Ä–µ–π–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Junior, Middle, Senior):")
    return STATE_NETW_GRADE

async def netw_grade_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['profile']['grade'] = update.message.text.strip()
    profile = context.user_data['profile']
    telegram_id = update.effective_user.id

    try:
        networking_service.save_profile(telegram_id, profile)
    except ValueError as err:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {err}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return STATE_NETW_GRADE

    context.user_data['viewed_profiles'] = []
    return await show_next_profile(update, context)
