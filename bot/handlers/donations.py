import os

from asgiref.sync import sync_to_async
from telegram import LabeledPrice, Update
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from bot.constants import STATE_MENU
from bot.keyboards.donations_keyboards import get_cancel_keyboard
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.logging_tools import logger
from bot.services import donations_service
from bot.services.core_service import is_speaker
from bot.utils.telegram_utils import send_message_with_retry

PAYMENT_TITLE = "–î–æ–Ω–∞—Ç –Ω–∞ PythonMeetup"
PAYMENT_DESC = "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–∏—Ç–∞–ø ‚Äî –ª—é–±–∞—è —Å—É–º–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤—É!"
CURRENCY = "RUB"
MAX_DONATE_AMOUNT = 99999


async def donate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–Ω–∞—Ç–∞", update.effective_user.id)
    await send_message_with_retry(
        update.message,
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –º–∞–∫—Å–∏–º—É–º 99 999):",
        reply_markup=get_cancel_keyboard(),
    )
    return "DONATE_WAIT_AMOUNT"


async def donate_wait_amount_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    user_id = update.effective_user.id
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        is_spk = await is_speaker(user_id)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –¥–æ–Ω–∞—Ç –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã", user_id)
        await send_message_with_retry(
            update.message,
            "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
        )
        return STATE_MENU
    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if amount > MAX_DONATE_AMOUNT:
            await send_message_with_retry(
                update.message,
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ ‚Äî {MAX_DONATE_AMOUNT} —Ä—É–±.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.",
                reply_markup=get_cancel_keyboard(),
            )
            return "DONATE_WAIT_AMOUNT"
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–≤—ë–ª —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞: %s", user_id, amount)
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s: %s", user_id, e)
        await send_message_with_retry(
            update.message,
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):",
            reply_markup=get_cancel_keyboard(),
        )
        return "DONATE_WAIT_AMOUNT"
    context.user_data["donate_amount"] = amount
    provider_token = os.environ.get("PAYMENTS_PROVIDER_TOKEN")
    is_spk = await is_speaker(user_id)
    if not provider_token:
        logger.error(
            "PAYMENTS_PROVIDER_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂",
            user_id,
        )
        await send_message_with_retry(
            update.message,
            "–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
        )
        return STATE_MENU
    prices = [LabeledPrice(label="–î–æ–Ω–∞—Ç –Ω–∞ –º–∏—Ç–∞–ø", amount=amount * 100)]
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É %s", user_id, amount)
    try:
        await update.message.reply_invoice(
            title=PAYMENT_TITLE,
            description=PAYMENT_DESC,
            payload="meetup-donation",
            provider_token=provider_token,
            currency=CURRENCY,
            prices=prices,
            start_parameter="donate",
        )
    except BadRequest as e:
        logger.warning(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e
        )
        await send_message_with_retry(
            update.message,
            "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–º–µ–Ω—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 99 999).",
            reply_markup=get_cancel_keyboard(),
        )
        return "DONATE_WAIT_AMOUNT"
    return "DONATE_WAIT_PAYMENT"


async def donate_cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_spk = await is_speaker(user_id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –¥–æ–Ω–∞—Ç", user_id)
    await send_message_with_retry(
        update.message,
        "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
    )
    return STATE_MENU


async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)


async def successful_payment_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    user_id = update.effective_user.id
    amount = update.message.successful_payment.total_amount // 100
    is_spk = await is_speaker(user_id)
    await sync_to_async(donations_service.save_donation)(
        {
            "telegram_id": user_id,
            "amount": amount,
        }
    )
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª %s —Ä—É–±.", user_id, amount)
    await send_message_with_retry(
        update.message,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç! –¢—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª –º–∏—Ç–∞–ø –Ω–∞ {amount} ‚ÇΩ üôè",
        reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
    )
    return STATE_MENU
